19th Sep 

	Software ? 
			System  , application , web application ,android application , web site
			e.g  SAP , Tally , outlook , gmail, flipcart , amazone , whataspp , careercenter , notpad ,,alarm , 
	
	set of program , perticular task/purpose 
	
	How software are developed ?
		language/coding , discussion , requirements , UI/UX , time ,

	SDLC - Software Development Life Cycle 
		1. Requirements 
		2. Analysis
		3. Desgining
		4. Implementaion/Coding
		5. Testing
		6. Mantainance

22th Sep
	1. Requirements -->  client gives us requirements . 
				e.g student , faculty , admin ,
					registration , login ,reports 
					student - attendance , result 
	2. Analysis --> each requirement is analysed 
				registration - fileds , who , 
				atatndance - login must be there , registrater 
			system flow , connectivity 
	3. Designing ---> looks , how it looks , UI/UX 
				pages/form desining 
	4. implementation --> coding ,logic are developed 
	5. Testing --> 	Accouring to requirements application working or not,
			To verify , validate
	6. Maintainance --> change ,update , new functionality 
				longest phares of life cycle
	
	SLDC Models 
			1. Sequential Model - Waterfall model , V Model 
			2. Iterative Model - Agile Model , Spiral Model , Incremental Model	

		
	Waterfall Model --> each pahare are in sequnece .And you can not go back .
				Requirements are fixed /Project is small /
	
	V Model ---> verification/Validation model 
			1. Business Requirements - client will gives us 
			2. System requirements - system requirements 
			3. Technical Specification/High Level - Overall structure of applcation
			4. Program specification/Low level - percular modul;e/program requirement/design 	
			Coding - Actual implentations  , connecting 

			Unit Test - Program/module/unit testing,Testing of percular program/module/unit/coponenet
			2. Interation Test - when 2 modules are connected and testing to gether 
			3. System test - To test as whole system with hardwares/network 
			4. Acceptance test - when client check requiremetns are fulfilled or not

		Verfication/Validation 
		
26th Sep 
	 - Models 
		Spiral model
		V model
		Waterfall
		Interative and incremental model
		Agile model 
		

29th Sep
	- SRS Document ?
			Software Requirement Specification
			Generalize document which is used by all stackholders (Desginer , developer , tester )
			Project details 
			Manager - Team Leader - 

			This e-commerce website will allow users to browse products, 			add them to a cart, and purchase them via secure payment methods. It will also include an admin panel for managing products, users, and orders.

			Online website
			payment method
			Product Browsing/search
			Add to cart
			Admin 
				product manage (create-update - delete)
				User 
				Order
		
			
			Functional Requirements --- i) Order Management (add-update-delete-track)
			ii) Registration & Login user 
			iii) Add to cart
			
			Non-Functional Requirements 
			i) Easy to Use
			ii) Responce time
			iii) Performance 
			iv) load 
			v ) Compatible

			Which requirement is more important ?
			Both are equally important 

		
			Fields of SRS --- scope , details of requirments , functional - non functional , technology 

	Lab task --> SRS of any social media 
	
--> Usecase diagram  -- mapping user with  activity
			admin can update order
			admin manage product
			user can track order

	Lab task --> use case doagram for Social Media
	
	Software Architechture ?

1st Oct

SRS document   --- Detailed of projects purpose,scope,tech stack, functional , non functional ,module description , use classes

usecase  diagram --mapping user to activity ,which activity done by whom
			Actors --Librarian , student ,visitor 
			Activies -- book issue , search books , return book , update book , 


Software Architecture  -- Overall porject structure 
			Librarian 		Student
			Book Issues		Browse Book
			Book Return 		issue Book
			Fine	

What is Testing  ???
 		actual vs expected result
		client requirement meet , all functionalties are working fine
		
		--evaluating & verifying process
		 involes executing software intent to find bugs 
		covers functional and non functional requirements
		

Testing Objectives ?
		product works ,
		error free product
		
		finding error
		Prevention error
		fulfill requirement
		improve quality
		user satishfaction

When we can start ? 
	Testing should be start as early as possible
	when we got the requirement --- Test planing , test case design , static testing (without executing software - review of document)


When to stop ?
	Testing is never ending process 

Testing principle ---? Rules 
	1. Absence of erro fallacy (Software have no defect but not fulflling requirement )
	2. Exhasting testing ( mobile no -- 5/7/10/20 each and every combination is not possible to test -use risk and priority based testing)
	3. Testing shows presence of defect ( 
	4. Defect Clustering (Small module may have more defect )
	5. Early Testing 
	6.pastiside paradox  ( Review and Revised test cases)
	7. Testing is context dependent (Banking/Social Media should be test differently)
	
3rd Oct
	What is ST?
	When to start?
	When to Stop?
	Principles ...
	
	-- Verify evaluating defect of product/software for given requirment
	--Working of software 
	Functional and non functional ---> What system does - functionality/features of application
					NF - How system does	- other then functionality like perforamnce,load,strees , compatiblity ,usability

	When to start/stop? As early as possible when we get requuirremnt
				meet deadline,exit creitera,test coverage , defect fix, buisness dicision
		
	Priciple - 
		early testing
		Testing context dependent
		error falacy
		Pastiside paradox
		Defect clusting
		Testing shows presence of defect
		Exhausting Testing

	Why Testing?
		Quality
		To completeness and correctness
		

Lab task : Find real scenario where software testing fails
		
	High Level Requirement ---> 
		E-Commerce Software : - 
			Products  - category , filters 
			Browse
			Search by ...
			Add to cart
			Payment - CC,DC,UPI,COD
			Assistance to Customer
			Exchange and return
			Checkout
			View Similar product
			Wish list
			Festival season-offers
		
		banking Application :-
			User friendly
			Security
			Payment - 
			Integration - Works with other , connect paytm
			Loan application
			CC,DC management
			Statements 
			Compilance and govrnemnt 
			
	lab task :	Practical
			HLR - Ecommerce 
			    - Social media
			    - Libary 
			    - tops Careercenter
			git hub
				cloud 
				code-file
				repository
			
			 Check Login with valid data  -positive
			Check Login with invalid data - Nagative testing
			
			
6th Oct : 
						
	when to start?When to stop?
	practical - HLR - High Level requirement 
	Due to ST which are real applccation 
	2014 - flipcart -sale-site crash , mytra , 2023 sine ,
	
	OOPS - 
		procedure oriented  - procedure/function (c)
		Object oriented  - object (java,python ,c++)

		1. class 	-	Blueprint / collection of object / real entity /state-behaviour/data members-member function
					Human is class , hands,legs,eyes...speak-eat-listen 
					Car is class , color,price,engine...drive
 
		2. object	-	real entity , it is type of class
					dharmishtha is Human 
					Vishant is Human 
					Baleno is Car
					Creta is Car

		3. Inheritance	-	Parent - child Property of one class can use property of another classs
					Person - name,age,address ....getDetails,display
					Employee - name,age,address,id,salary,department
					Person in employee class - reusablity 
					Employee is Person
					
					Vehical - type,c_name,price,engine,color - details
					Car - type,c_name,price,engine , wheels 
					Scooter - type,c_name,price,engine
	 				
					Car is Vehical
					schooter is Vehical 


		4. Polymorphisum
					Ability to take more then one form - many form 
					Maitri is student,daughter,employee
					addition is of 2 numbers , 3 numbers n numbers , numeric , decmial 

				
		5. Encapsulation	wraping of data and functions to gather into single unit (class)
					data private ,methods public 			

		6. Abstraction    showing essentials,hiding other details 
					SBI - interest 
						balance how internally works .
				

SQL		practise - tables , data store , Structure Query Language , Manipulations of data
		Database testing 
		
		Database ? To store data -Manipulation 
		DBMS - Database management System  - to manage your data -manipulate - thru sql 
		RDBMS - Relation DBMS - tables are related 
		Tools - RDBMS - eg -  MySQL , ms-access , SQL server , 	
			MySQL - opensource  -command base 
					 - workbanch

		SQL - 4 types 
			DDL - Data Definition Langauge (create , alter ,drop)
			DML - Data Manipulation Lanagauge (insert , update,delete)
			DQL - Data Query Langauge (select)	
			DCL - Data Control Lanaguage (grant - revoke)
			
			Constrints  - Primary key
					Forighn key
					Not null
					deafault
					check

10th Oct 

1.		create database database_name
2. 		use database_name
		DDL 
3. 		create table table_name(column datatype size , column datatye size ....)
4. 		alter table table_name add city varchar(20)
5. 		alter table table_name drop email

Person (pid,pname,email,address,cno)

DML - Manipulation
Data related 
1. insert --- insert into table_name(pid,pname,address,email) values(12,'test','cg road','wert@gmail.com')

13th Oct 

2. update -- update <<tablename>> set <<column_name>> value where condition
3. delete -- delete from <<tablename>> where condition


Constrints  - 	Boundry/ Limitation 
					
					Primary key - To uniquly identify record 
					Forighn key - refeerences to another table/data 
								Form Result of student 
								Result_table : (roll_no , name , percentage , gender , phone_no , email_id , address ,
												pass/Fail , school_name , grade ,)	

					Employee_master - eid (PK) , ename , salary , address ,age , did(FK)
					Department_master - did (PK), dname ,location
									
	

					Not null - column value must be there 
					deafault - default value
					check - to check condition 
					unique key - To uniquely indentify record , 
								PK vs UK
								table have one PK , UK may be more
								PK doesn't allow null , UK one NULL value is allowed 


			Lab task : 1. Departmet Table 5 records
						Employee table 15 records 
					2.	Customer (cid Primary Key , cname , bdate , c_no,email   - 10 records 
						Product (pid Primary Key , pname , price , pdiscrption) - 10  records 
						Orders (oid Primary Key , cid Foreign key , pid Foreign key , qty , order_date ) - 30 records 

15th oct
	Primary - Foreighn key ?

one department have many employees 
one product orderd by many customers
one course enroll by many students					1. Software Testing			-	15 enroll
													2. Data Analytics				-	20 enroll
													3. Content Writing				-	5  enroll
													4. System Admin				-	5 enroll


CourseMaster ---> cid, cname , duration , fees , desciprtion 
Studentmaster ---> sid , sname , c_no , bdate , address ,job_profile , year_of_passing
					1  Vishant 343434  1990-09-09 parimal QA 2012
					2 dharmishtha 435345  1990-04-09 CGRoad BCome 2010 	


student_enroll_course -- > enroll_id , sid , cid ,date_of_enquiry , communication 
							101			1    1    2025-9-20 		he uis intereested and want timing morning only 
							102			1	 2    2025-09-25 		he is confues to select the course , and we guided to enroll for ST as already working in that 
							103			2	3	

eventmaster -->event_id , even_name , 				duration ,		start_date 
				101			Diwali celebration			2			20th Oct
				102			Box Cricket					1			22nd Oct

student_enroll_even --> enroll_id, sid , event_id ,  
						1001		2		101
						1002		1		102	



DML - insert , update ,delete

update employee set address="South Bopal" where eid=5

delete from employee where eid=2

DQL - Select Query 





	








2 Module - Manual Testing 
	
	
		

		
	
			

		
	

		


